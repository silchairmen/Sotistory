
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.13'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	//QueryDSL 추가
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com.soti'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = "16"
}

repositories {
	mavenCentral()
}

//lombok 설정
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.testng:testng:7.1.0'
    implementation 'org.projectlombok:lombok:1.18.26'
    compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//DB
	implementation("org.mariadb.jdbc:mariadb-java-client:2.1.2")

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	runtimeOnly 'mysql:mysql-connector-java'

	//devtools
	implementation 'org.springframework.boot:spring-boot-devtools'

	//springSecurity
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//Valied
	implementation 'org.springframework.boot:spring-boot-starter-validation'

	//Spring-Security-Test
	implementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'

	//QueryDSL 추가
	implementation 'com.querydsl:querydsl-jpa:5.0.0'
	annotationProcessor group: 'com.querydsl', name: 'querydsl-apt', version: '5.0.0'
}

//리엑트 설정
def frontendDir = "$projectDir/frontend-app"

sourceSets {
	main {
		resources { srcDirs = ["$projectDir/src/main/resources"]
		}
	}
}

processResources { dependsOn "copyReactBuildFiles" }

task installReact(type: Exec) {
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "audit", "fix"
		commandLine 'npm.cmd', 'install', '--force' }
	else {
		commandLine "npm", "audit", "fix"
		commandLine 'npm', 'install', '--force'
	}
}

task buildReact(type: Exec) {
	dependsOn "installReact"
	workingDir "$frontendDir"
	inputs.dir "$frontendDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		commandLine "npm.cmd", "run-script", "build", '--force'
	} else {
		commandLine "npm", "run-script", "build", '--force'
	}
}

task copyReactBuildFiles(type: Copy) {
	dependsOn "buildReact"
	from "$frontendDir/build"
	into "$projectDir/src/main/resources/static"
}

bootJar {

}

tasks.named('test') {
	useJUnitPlatform()
}



//querydsl 추가 시작
def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
compileQuerydsl{
	options.annotationProcessorPath = configurations.querydsl
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
//querydsl 추가 끝
targetCompatibility = JavaVersion.VERSION_16
